import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt


class Car:
    # defining parameters
    def __init__(self, length=2.3, velocity=5, disturbance=0, x=0, y=0, theta=0):
        self.length = length
        self.velocity = velocity
        self.x = x
        self.y = y
        self.theta = theta
        self.disturbance = disturbance

    def move(self, steering_angle_rad, dt):
        # simulate the motion of the car from t=0 to t=0+dt
        # starting from z_initial
        def system_dynamics(t, z):

            θ = z[2]
            return [self.velocity * np.cos(θ),
                    self.velocity * np.sin(θ),
                    self.velocity * np.tan(steering_angle_rad+self.disturbance) / self.length]

        # next, we need to solve the IVP:
        z_initial = [self.x, self.y, self.theta]
        solution = solve_ivp(system_dynamics,
                             [0, dt],
                             z_initial)
        self.x = solution.y[0][-1]
        self.y = solution.y[1][-1]
        self.theta = solution.y[2][-1]
        

# PDController uses kp, kd and ts to control system
class PDController:
    def __init__(self, kp, kd, ts):
        self.kp = kp
        self.kd = kd / ts
        self.ts = ts
        self.error_previous = None

    def control(self, y, y_set_point=0):
        error = y_set_point - y
        pd_control = self.kp * error

        if self.error_previous is not None:
            pd_control += self.kd * (error - self.error_previous)

        self.error_previous = error
        return pd_control


final_t = 50
initial_x = 0
initial_y = 0.2
initial_theta = 0 * np.pi / 180
rate_of_sample = 40
add_disturbance = 1 * np.pi / 180
sampling_time = 1 / rate_of_sample
ticks = rate_of_sample*final_t


car1 = Car(x=initial_x, y=initial_y, disturbance=add_disturbance, theta=initial_theta)
controller = PDController(kp=0.4, kd=0.1, ts=sampling_time)
black_box_x = np.array([car1.x])
black_box_y = np.array([car1.y])
for k in range(ticks):
    pd_control = controller.control(car1.y)
    car1.move(pd_control, sampling_time)
    black_box_x = np.vstack((black_box_x, [car1.x]))
    black_box_y = np.vstack((black_box_y, [car1.y]))

car2 = Car(x=initial_x, y=initial_y, disturbance=add_disturbance, theta=initial_theta)
controller = PDController(kp=0.4, kd=0.35, ts=sampling_time)
black_box_x2 = np.array([car2.x])
black_box_y2 = np.array([car2.y])
for k in range(ticks):
    pd_control = controller.control(car2.y)
    car2.move(pd_control, sampling_time)
    black_box_x2 = np.vstack((black_box_x2, [car2.x]))
    black_box_y2 = np.vstack((black_box_y2, [car2.y]))

car3 = Car(x=initial_x, y=initial_y, disturbance=add_disturbance, theta=initial_theta)
controller = PDController(kp=0.4, kd=0.6, ts=sampling_time)
black_box_x3 = np.array([car3.x])
black_box_y3 = np.array([car3.y])
for k in range(ticks):
    pd_control = controller.control(car3.y)
    car3.move(pd_control, sampling_time)
    black_box_x3 = np.vstack((black_box_x3, [car3.x]))
    black_box_y3 = np.vstack((black_box_y3, [car3.y]))

plt.plot(black_box_x, black_box_y, label="K$_d$ = 0.1)")
plt.plot(black_box_x2, black_box_y2, label="K$_d$ = 0.35)")
plt.plot(black_box_x3, black_box_y3, label="K$_d$ = 0.6)")
plt.grid()
plt.xlabel("position, x (m)")
plt.ylabel("position, y (m)")
plt.legend()
plt.show()

